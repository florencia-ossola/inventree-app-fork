# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - lint
  - test
  - release

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "> Compiling the code..."
    - make build
    - echo "> Compile complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "> Running unit tests..."
    - make test

lint-test-job:   # This job also runs in the test stage.
  stage: lint    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code..."
    - make lint

## Release stage jobs to generate binaries on tag.
build-binaries:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "> Building binaries..."
    - make cross
  artifacts:
    paths:
      - bin/

# Upload binaries to the package registry.
upload-binaries:
  stage: release
  image: curlimages/curl:latest
  needs: ["build-binaries"]
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "> Uploading binaries..."
    - |+
      for file in bin/*; do
        curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file $file "${PACKGE_REGISTRY_URL}/$(basename $file)";
      done

# Generate a release on the project.
release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs: ["build-binaries"]
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "> Generating the relase..."
    - |+
      release-cli create --name $CI_COMMIT_TAG --description "Release $CI_COMMIT_TAG" --ref $CI_COMMIT_TAG --tag-name $CI_COMMIT_TAG $ASSETS_LINKS
